<?php

namespace Botble\{Module}\Http\Controllers;

use Botble\Base\Events\BeforeEditContentEvent;
use Botble\Base\Events\CreatedContentEvent;
use Botble\Base\Events\DeletedContentEvent;
use Botble\Base\Events\UpdatedContentEvent;
use Botble\Base\Forms\FormBuilder;
use Botble\Base\Http\Responses\BaseHttpResponse;
use Botble\{Module}\Forms\{Name}Form;
use Botble\{Module}\Http\Requests\{Name}Request;
use Botble\{Module}\Repositories\Interfaces\{Name}Interface;
use Botble\Base\Http\Controllers\BaseController;
use Illuminate\Http\Request;
use Exception;
use Botble\{Module}\Tables\{Name}Table;

class {Name}Controller extends BaseController
{
    /**
     * @var {Name}Interface
     */
    protected ${+name}Repository;

    /**
     * {Name}Controller constructor.
     * @param {Name}Interface ${+name}Repository
     */
    public function __construct({Name}Interface ${+name}Repository)
    {
        $this->{+name}Repository = ${+name}Repository;
    }

    /**
     * @param {Name}Table $dataTable
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     * @throws \Throwable
     */
    public function index({Name}Table $dataTable)
    {
        return $dataTable->renderTable();
    }

    /**
     * @param FormBuilder $formBuilder
     * @return string
     */
    public function create(FormBuilder $formBuilder)
    {
        return $formBuilder->create({Name}Form::class)
            ->setTitle(trans('plugins/{-module}::{-name}.create_new_{base}'))
            ->setUseInlineJs(true)
            ->renderForm();
    }

    /**
     * @param {Name}Request $request
     * @param BaseHttpResponse $response
     * @return BaseHttpResponse
     */
    public function store({Name}Request $request, BaseHttpResponse $response)
    {
        ${+name} = $this->{+name}Repository->createOrUpdate($request->input());

        event(new CreatedContentEvent({NAME}_MODULE_SCREEN_NAME, $request, ${+name}));

        return $response->setMessage(trans('core/base::notices.create_success_message'));
    }

    /**
     * @param $id
     * @param FormBuilder $formBuilder
     * @param Request $request
     * @return string
     */
    public function edit($id, FormBuilder $formBuilder, Request $request)
    {
        ${+name} = $this->{+name}Repository->findOrFail($id);

        event(new BeforeEditContentEvent($request, ${+name}));

        return $formBuilder->create({Name}Form::class, ['model' => ${+name}])
            ->setTitle(trans('plugins/{-module}::{-name}.edit_slide', ['id' => ${+name}->id]))
            ->setUseInlineJs(true)
            ->renderForm();
    }

    /**
     * @param $id
     * @param {Name}Request $request
     * @param BaseHttpResponse $response
     * @return BaseHttpResponse
     */
    public function update($id, {Name}Request $request, BaseHttpResponse $response)
    {
        ${+name} = $this->{+name}Repository->findOrFail($id);
        ${+name}->fill($request->input());

        $this->{+name}Repository->createOrUpdate(${+name});

        event(new UpdatedContentEvent({NAME}_MODULE_SCREEN_NAME, $request, ${+name}));

        return $response->setMessage(trans('core/base::notices.update_success_message'));
    }

    /**
     * @return string
     * @throws \Throwable
     */
    public function destroy($id)
    {
        ${base} = $this->{+name}Repository->findOrFail($id);

        return view('plugins/{-module}::partials.delete', compact('{base}'))->render();
    }

    /**
     * @param Request $request
     * @param $id
     * @param BaseHttpResponse $response
     * @return array|BaseHttpResponse
     */
    public function postDelete(Request $request, $id, BaseHttpResponse $response)
    {
        try {
            ${+name} = $this->{+name}Repository->findOrFail($id);
            $this->{+name}Repository->delete(${+name});

            event(new DeletedContentEvent({NAME}_MODULE_SCREEN_NAME, $request, ${+name}));

            return $response->setMessage(trans('core/base::notices.delete_success_message'));
        } catch (Exception $exception) {
            return $response
                ->setError()
                ->setMessage($exception->getMessage());
        }
    }
}
